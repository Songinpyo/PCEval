"""
Code evaluation metrics for Arduino-LLM project.
"""

import logging
try:
    # Note: The exact import might depend on the library version/structure.
    # Check the library's documentation if this fails.
    # We might need specific language parsers as well.
    from codebleu import calc_codebleu
except ImportError:
    logging.warning("'codebleu' library not found. CodeBLEU score calculation will be skipped. Install with: pip install codebleu")
    calc_codebleu = None # Define as None if import fails

def calculate_codebleu(generated_code: str, reference_code: str) -> float | None:
    """
    Calculates the CodeBLEU score between generated code and reference code.

    Args:
        generated_code: The code generated by the LLM.
        reference_code: The ground truth reference code.

    Returns:
        The CodeBLEU score as a float (0.0 to 1.0), or None if calculation fails
        (e.g., library not installed, invalid code preventing parsing).
    """
    if calc_codebleu is None:
        logging.warning("Skipping CodeBLEU calculation because the library is not available.")
        return None

    if not generated_code or not reference_code:
        logging.warning("Skipping CodeBLEU calculation due to empty generated or reference code.")
        return 0.0 # Return 0 if code is empty

    try:
        # calc_codebleu expects lists of predictions and references
        # References should be a list of lists (in case of multiple references)
        result = calc_codebleu(
            predictions=[generated_code],
            references=[[reference_code]],
            lang="cpp", # Arduino uses C++
            weights=(0.25, 0.25, 0.25, 0.25), # Default weights for BLEU, weighted ngram, AST match, dataflow match
            tokenizer=None # Use default tokenizer
        )
        # Return the main CodeBLEU score
        return result.get('codebleu', 0.0) # Default to 0.0 if key missing

    except Exception as e:
        # Catch potential errors during AST parsing or dataflow analysis
        logging.error(f"Error calculating CodeBLEU: {e}", exc_info=True)
        # Return None or 0.0? Let's return 0.0 to indicate failure but keep type consistent.
        return 0.0 